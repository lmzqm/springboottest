debug=true

#数据库相关配置
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=Zqm 5695506
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop

# 这里需要对这个属性加以说明使用的方法 是hibernate的配置属性 主要的作用是：自动创建，更新，验证数据库的表结构，
# create 每次加载的时候都会删除上一次生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何的改变也要执行，这就是导致数据库数据丢失的一个重要原因
# create-drop:每次加载hibernate时根据model类生成表，但是sessionFactory一关闭，表就自动删除
# update:最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate的时候
#        根据model类自动更新表结构，即使表结构发生了改变，但是表中的行任然存在不会删掉以前的行，要注意的是，当部署服务后，表结构是不会马上建立起来的，要等应用第一次运行后才会
# validate: 每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新值，但是会插入新值。

# 针对比较严格的html的操作

spring.thymeleaf.mode = LEGACYHTML5

#多彩输出日志信息
spring.output.ansi.enabled=detect

#将日志信息输出到文件中
logging.file=my.log

#日志的级别控制 logging.level.* = LEVEL
# logging.level 日志的级别控制的前缀 *为包名或者Logger名
# LEVEL 选项TARCE,DEBUG,INFO,WARN,ERROR,FATAL,OFF
logging.level.com.lmzqm.Controller= DEBUG

#自定义日志的配置
#Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
#Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
#Log4j2：log4j2-spring.xml, log4j2.xml
#JDK (Java Util Logging)：logging.properties

# 自定义输出格式
# 定义输出到控制台的样式
#logging.pattern.console=

# 定义到输出文件的格式
#logging.pattern.file=


#下面探讨下redis的相关配置操作
#redis数据库的索引
spring.redis.database=0
#redis服务器的地址
spring.redis.host=localhost
#redis服务器连接的端口
spring.redis.port=6379
#Redis服务器连接密码 默认为空
spring.redis.password=
#连接池最大连接数
spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负数表示没有限制）
spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8
#连接池的最小空闲连接
spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=0


#下面探讨Spring Boot属性配置文件的详解
#自定义属性与加载 然后通过@Value("${属性名}")注解来加载对应的配置属性
com.gyenno.blog.name = Gyenno
com.gyenno.blog.title = Spring Boot 教程
#参数的引用
com.gyenno.bloc.desc = ${com.gyenno.blog.name}正在努力写《${com.gyenno.blog.title}}》

#使用随机数 可以通过${random} 来产生int,long,String

#随机字符串
com.disispace.blog.value = ${random.value}

#随机Int
com.didispatch.blog.count = ${random.int}

#随机long
com.dispatch.blog.bignumber = ${random.long}

#10以内的随机数
com.random.number = ${random.int(10)}

#10到20以内的随机数
com.random.randomnumber = ${random.int[10,20]}


#多环境配置的操作 针对开发，测试，生产分别对应不同的配置文件 满足application-{profile}.properties的格式



#分别对应 spring.profiles.active = test application-test.properties

#执行 java -jar xxx.jar 采用默认的dev
# java -jar xxx.jar --spring.profiles.active= test 执行测试环境的配置
# java -jar xxx.jar --spring.profiles.active=prod 用于生产环境










